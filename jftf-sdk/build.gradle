plugins {
    id 'java'
    id 'application'
    id 'distribution'
}

group = 'org.jftf.sdk'
version = '1.0'

repositories {
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.github.com/Java-Functional-Testing-Framework/JFTF-Lib")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
    implementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
    implementation 'org.jftf.core:jftf-core:1.0'
    implementation 'org.jftf.lib:jftf-lib:1.0'
    implementation 'org.apache.velocity:velocity-engine-core:2.3'
    implementation 'com.google.googlejavaformat:google-java-format:1.10.0'
}

test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

// Check if gpr.key and gpr.user are set
if (!project.hasProperty("gpr.key") || !project.hasProperty("gpr.user")) {
    throw new GradleException("GitHub Packages credentials (gpr.key and gpr.user) are not set. " +
            "Please execute the \"scripts/deploy/configure_grade_git_credentials.sh\" script to configure access credentials" +
            "to GitHub Packages.")
}

// Extract JFTF test application metadata from environment CLASS_NAME and TEST_GROUP variables (used by JftfTestCaseGenerator as well)
def jftfTestName = project.findProperty("jftf.class_name") ?: System.getenv("CLASS_NAME")
def jftfTestGroup = project.findProperty("jftf.test_group") ?: System.getenv("TEST_GROUP")

if (jftfTestName == null || jftfTestGroup == null) {
    throw new GradleException("JFTF test application configuration for gradle build file (jftf.class_name and jftf.test_group) are not set. " +
            "Please execute the \"scripts/sdk/set_test_application_gradle_meta.sh\" script to configure JFTF test application configuration for gradle build file!")
}

jftfTestName = jftfTestName.toString()
jftfTestGroup = jftfTestGroup.toString()
def jftfTestCasePath = "${System.properties['user.home']}/.jftf/test_cases/${jftfTestGroup}/${jftfTestName}"
def jftfTestCaseBinaryPath = "${System.properties['user.home']}/.jftf/test_cases/${jftfTestGroup}/${jftfTestName}/bin/${jftfTestName}"

distributions {
    main {
        distributionBaseName = jftfTestName
    }
}

tasks.register('copyTestToJftfTargetDirectory', Copy) {
    group = 'jftf'
    description = 'Copy installed distribution files to JFTF test_cases target directory'

    from layout.buildDirectory.dir("install/${jftfTestName}")
    into jftfTestCasePath
}

startScripts {
    applicationName = jftfTestName
}

jar {
    archiveName "${jftfTestName}.jar"
}

application {
    mainClass = "jftf.gen.${jftfTestName}.JftfTestBootstrapper"
}

tasks.register('registerJftfTestCaseViaJFTFCore') {
    group = 'jftf'
    description = 'If JFTF test case is compiled, executes the binary with the -r flag for registration'

    doLast {
        // Check if the binary path exists
        if (!file(jftfTestCaseBinaryPath).exists()) {
            throw new GradleException("JFTF test case binary path does not exist: $jftfTestCaseBinaryPath")
        }

        // Execute the binary with -r flag for registration
        def process = Runtime.getRuntime().exec("$jftfTestCaseBinaryPath -r")

        // Capture stdout and stderr
        def stdout = new StringBuilder()
        def stderr = new StringBuilder()

        process.consumeProcessOutput(stdout, stderr)

        // Wait for the process to complete
        int exitValue = process.waitFor()

        // Check the exit value
        if (exitValue != 0) {
            throw new GradleException("JFTF test case registration failed with exit code: $exitValue\n\n" +
                    "stdout:\n$stdout\n\nstderr:\n$stderr")
        } else {
            println("JFTF test case registration successful!")
            println("stdout:\n$stdout\n\nstderr:\n$stderr")
        }
    }
}

tasks.register('printJftfGradleMetaConfiguration') {
    group = 'jftf'
    description = 'Prints the JFTF test case Gradle meta configuration and build status'

    doLast {
        println("JFTF Test Case Gradle Meta Configuration:")
        println("jftfTestName = $jftfTestName")
        println("jftfTestGroup = $jftfTestGroup")
        println("jftfTestCasePath = $jftfTestCasePath")
        println("jftfTestCaseBinaryPath = $jftfTestCaseBinaryPath")

        if (file(jftfTestCasePath).exists() && file(jftfTestCaseBinaryPath).exists()) {
            println("Build Status: Compiled & Installed")
        } else {
            if (file(layout.buildDirectory.dir("install/${jftfTestName}")).exists()) {
                println("Build Status: Compiled & Not Installed")
            } else {
                println("Build Status: Not Compiled & Not Installed")
            }
        }
    }
}
